import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    //Method to roll dices and generate array of rolled values
    public static int roll(int n) {
        int counter = 0;
        int[] values = new int[n];
        while (counter < n) {
            for (int i = 0; i < values.length; i++) {
                int num = ThreadLocalRandom.current().nextInt(1, 7);
                values[i] = num;
                counter++;
            }
            System.out.println(Arrays.toString(values));
        }
        return values.length;
    }

    public static boolean containsDuplicates(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            for(int j = 1+i; j<nums.length; j++) {
                if (nums[i] == nums[j]) {
                    return true;
                }
            }
        }
        return false;
    }
    // average calculator method
    public static int averageCalculator (int[] numArray) {
        int arraySum = 0;
        for (int i = 0; i < numArray.length; i++) {
            arraySum += numArray[i];
        }
        return arraySum/numArray.length;
    }

    //lowest average method

    public static int[] lowestAverage (int[][] numArray){
        int[] ans = new int[2];
        double average = 0;
        double lowestAverage = averageCalculator(numArray[0]);

        for (int i = 0; i < numArray.length; i++) {
            for (int j = 0; j < numArray[i].length; j++) {
                average = averageCalculator(numArray[j]);

                if (average < averageCalculator(numArray[j + 1])) {
                    if (average <= lowestAverage) {
                        lowestAverage = average;
                        ans = numArray[j];
                    }
                } else {
                    average = averageCalculator(numArray[j + 1]);
                    ans = numArray[j + 1];

                }
            }
        }
        return ans;
    }

    //Lab3 : Maps

    //Calculating max
    public static int maxValueCal(int[][] nums) {
        int max = nums[0][0];

        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums[i].length; j++) {
                if (nums[i][j] > max) {
                    max = nums[i][j];
                }

            }
        }

        return max;
    }

    //Calculating Min
    public static int minValueCal(int[][] nums) {
        int min = nums[0][0];
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums[i].length; j++) {
                if (nums[i][j] < min) {
                    min = nums[i][j];
                }
            }
        }

        return min;
    }

    //Calculating Unique Values
    public static void uniqueValues(int[][] nums) {
        HashSet<Integer> uniqueTemps = new HashSet<>();
        int min = minValueCal(nums);
        int max = maxValueCal(nums);

        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums[i].length; j++) {
                if (!uniqueTemps.contains(nums[i][j])) {
                    uniqueTemps.add(nums[i][j]);
                }
            }
        }

        System.out.println("High: "+ max);
        System.out.println("Low: "+ min);
        for (int i = min; i < max; i++) {
            if (!uniqueTemps.contains(i)) {
                System.out.println("Never saw temperature: "+i);
            }
        }
    }

    //Tally and return winner

    public static String tally (List<String> words){
        Map<String, Integer> wordsCount = new HashMap<>();
        ArrayList<Integer> values = new ArrayList<>();
        int max=0;
        String name = "";

        for(int i = 0; i<words.size(); i++){
            if(wordsCount.keySet().contains(words.get(i))){
                int value = wordsCount.get(words.get(i));
                wordsCount.put(words.get(i), value+1);
            }else{
                wordsCount.put(words.get(i), 1);
            }
        }
        for (String key: wordsCount.keySet()) {
            if(wordsCount.get(key)> max){
                max = wordsCount.get(key)+1;
                name = key;
            }
        }
        return name+ " received the most votes!";


    }

}





