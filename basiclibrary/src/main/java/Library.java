import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.ThreadLocalRandom;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    //Method to roll dices and generate array of rolled values
    public static int roll(int n) {
        int counter = 0;
        int[] values = new int[n];
        while (counter < n) {
            for (int i = 0; i < values.length; i++) {
                int num = ThreadLocalRandom.current().nextInt(1, 7);
                values[i] = num;
                counter++;
            }
            System.out.println(Arrays.toString(values));
        }
        return values.length;
    }

    public static boolean containsDuplicates(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            for(int j = 1+i; j<nums.length; j++) {
                if (nums[i] == nums[j]) {
                    return true;
                }
            }
        }
        return false;
    }
    // average calculator method
    public static int averageCalculator (int[] numArray) {
        int arraySum = 0;
        for (int i = 0; i < numArray.length; i++) {
            arraySum += numArray[i];
        }
        return arraySum/numArray.length;
    }

    //lowest average method

    public static int[] lowestAverage (int[][] numArray){
        int[] ans = new int[2];
        double average = 0;
        double lowestAverage = averageCalculator(numArray[0]);

        for (int i = 0; i < numArray.length; i++) {
            for (int j = 0; j < numArray[i].length; j++) {
                average = averageCalculator(numArray[j]);

                if (average < averageCalculator(numArray[j + 1])) {
                    if (average <= lowestAverage) {
                        lowestAverage = average;
                        ans = numArray[j];
                    }
                } else {
                    average = averageCalculator(numArray[j + 1]);
                    ans = numArray[j + 1];

                }
            }
        }
        return ans;
    }
}





