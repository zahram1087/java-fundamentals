/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.nio.file.Path;
import java.nio.file.Paths;

import static org.junit.Assert.*;

public class AppTest {
    //Setting up to be able to test for System.out.println()

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;
    private final PrintStream originalErr = System.err;

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    @Test public void testlinterForJsOneError() {
        App classUnderTest = new App();
        Path path = Paths.get("resources/one-error.js");
        App.linterForJs(path);
        String expected = "Line 101: Missing semicolon\n";
        assertEquals(expected, outContent.toString());
    }

    @Test public void testlinterForJsEmptyFile() {
        App classUnderTest = new App();
        Path path = Paths.get("resources/empty-file.js");
        App.linterForJs(path);
        String expected = "";
        assertEquals(expected, outContent.toString());
    }

    @Test public void testlinterForJsFewErrors() {
        App classUnderTest = new App();
        Path path = Paths.get("resources/few-errors.js");
        App.linterForJs(path);
        String expected = "Line 13: Missing semicolon\n" +
                "Line 65: Missing semicolon\n" +
                "Line 77: Missing semicolon\n" +
                "Line 90: Missing semicolon\n";
        assertEquals(expected, outContent.toString());
    }

    @Test public void testlinterForJsmanyErrors() {
        App classUnderTest = new App();
        Path path = Paths.get("resources/many-errors.js");
        App.linterForJs(path);
        String expected = "Line 3: Missing semicolon\n" +
                "Line 5: Missing semicolon\n" +
                "Line 11: Missing semicolon\n" +
                "Line 13: Missing semicolon\n" +
                "Line 15: Missing semicolon\n" +
                "Line 26: Missing semicolon\n" +
                "Line 28: Missing semicolon\n" +
                "Line 32: Missing semicolon\n" +
                "Line 36: Missing semicolon\n" +
                "Line 40: Missing semicolon\n" +
                "Line 41: Missing semicolon\n" +
                "Line 49: Missing semicolon\n" +
                "Line 50: Missing semicolon\n" +
                "Line 51: Missing semicolon\n" +
                "Line 53: Missing semicolon\n" +
                "Line 55: Missing semicolon\n" +
                "Line 64: Missing semicolon\n" +
                "Line 70: Missing semicolon\n" +
                "Line 71: Missing semicolon\n" +
                "Line 72: Missing semicolon\n" +
                "Line 73: Missing semicolon\n" +
                "Line 74: Missing semicolon\n" +
                "Line 76: Missing semicolon\n" +
                "Line 77: Missing semicolon\n" +
                "Line 78: Missing semicolon\n" +
                "Line 79: Missing semicolon\n" +
                "Line 80: Missing semicolon\n" +
                "Line 82: Missing semicolon\n" +
                "Line 83: Missing semicolon\n" +
                "Line 84: Missing semicolon\n" +
                "Line 85: Missing semicolon\n" +
                "Line 86: Missing semicolon\n" +
                "Line 88: Missing semicolon\n" +
                "Line 89: Missing semicolon\n" +
                "Line 90: Missing semicolon\n" +
                "Line 91: Missing semicolon\n" +
                "Line 92: Missing semicolon\n" +
                "Line 94: Missing semicolon\n" +
                "Line 95: Missing semicolon\n" +
                "Line 96: Missing semicolon\n" +
                "Line 97: Missing semicolon\n" +
                "Line 98: Missing semicolon\n" +
                "Line 99: Missing semicolon\n" +
                "Line 100: Missing semicolon\n" +
                "Line 101: Missing semicolon\n";
        assertEquals(expected, outContent.toString());
    }

    @Test public void testlinterForJsErrorFree() {
        App classUnderTest = new App();
        Path path = Paths.get("resources/empty-file.js");
        App.linterForJs(path);
        String expected = "";
        assertEquals(expected, outContent.toString());
    }
//Returning back to System.out.println()
    @After
    public void restoreStreams() {
        System.setOut(originalOut);
        System.setErr(originalErr);
    }
}
